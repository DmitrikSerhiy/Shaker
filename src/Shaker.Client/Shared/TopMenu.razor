@using Shaker.Client.Services
@inject CocktailsStateService CocktailsStateService
@inject BarStateService BarStateService
@implements IDisposable

<div class="container mt-3 top-nav-bar">
    <div class="top-menu-default">
        <Header></Header>
        <MenuButton></MenuButton>
    </div>
    <div class="top-menu-minified">
        <MenuButton></MenuButton>
    </div>

    <BarPopup></BarPopup>

    <div id="shaker-menu" class="list-group offcanvas offcanvas-top shaker-menu">
        <div class="offcanvas-body">
            <div class="shaker-menu-container">

                <div class="menu-minified-with-header">
                    <Header></Header>
                </div>

                <div data-bs-dismiss="offcanvas">
                    <NavLink class="list-group-item list-group-item-action btn btn-link nav-list-group-item cocktail-nav-item" ActiveClass="active" href="mycocktails">
                        Мої коктейлі
                        @if (availableCocktailsCount != 0) {
                            <span style="text-decoration: none" class="badge text-bg-secondary rounded-pill cocktails-badge">@availableCocktailsCount</span>
                        }
                    </NavLink>
                </div>
                <div data-bs-dismiss="offcanvas">
                    <NavLink class="list-group-item list-group-item-action btn btn-link nav-list-group-item cocktail-nav-item" ActiveClass="active" href="allcocktails">
                        Всі коктейлі
                        @if (allCocktailsCount != 0) {
                            <span style="text-decoration: none" class="badge text-bg-secondary rounded-pill cocktails-badge">@allCocktailsCount</span>
                        }
                    </NavLink>
                </div>

                <div data-bs-dismiss="offcanvas">
                    <NavLink class="list-group-item list-group-item-action btn btn-link nav-list-group-item cocktail-nav-item" ActiveClass="active" href="ingredients">
                        Інгрідієнти
                        @if (ingredientsCount != 0) {
                            <span style="text-decoration: none" class="badge text-bg-secondary rounded-pill cocktails-badge">@ingredientsCount</span>
                        }
                    </NavLink>
                </div>

                <div class="form-check form-switch list-group-item list-group-item-action nav-list-group-item ">
                    <input id="dark-switch" type="checkbox" class="form-check-input theme-switcher">
                    <label id="dark-switch-label" for="dark-switch"></label>
                </div>

                <BarPicker></BarPicker>

            </div>
        </div>
    </div>
</div>

@code {
    public int allCocktailsCount { get; set; }
    public int availableCocktailsCount { get; set; }
    public int ingredientsCount { get; set; }
    private int _currentBarId = -1;

    protected override async Task OnInitializedAsync() {
        CocktailsStateService.OnCocktailsChange += CocktailStateChangedAsync;
        CocktailsStateService.OnIngredientsChange += IngredientsStateChangedAsync;
        BarStateService.OnCurrentBarChange += BarListChange;
        BarStateService.OnCurrentBarChange += CurrentBarChange;
        
        _currentBarId = await BarStateService.GetBarAsync();
    }

    public void Dispose() {
        CocktailsStateService.OnCocktailsChange -= CocktailStateChangedAsync;
        CocktailsStateService.OnIngredientsChange -= IngredientsStateChangedAsync;
        BarStateService.OnCurrentBarChange -= BarListChange;
        BarStateService.OnCurrentBarChange -= CurrentBarChange;
    }

    private async Task CocktailStateChangedAsync() {
        allCocktailsCount = await CocktailsStateService.GetAllCocktailsCountAsync();
        availableCocktailsCount = await CocktailsStateService.GetAvailableCocktailsCountAsync();
        StateHasChanged();
    }
    
    private async Task IngredientsStateChangedAsync() {
        ingredientsCount = await CocktailsStateService.GetIngredientsCountAsync();
        StateHasChanged();
    }

    private Task BarListChange() {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task CurrentBarChange() {
        StateHasChanged();
        return Task.CompletedTask;
    }
}