@using Shaker.Client.Dtos
@using Shaker.Client.Services
@inject IJSRuntime JSRuntime
@inject DataService DataService
@inject ProfileService ProfileService
@inject BarStateService BarStateService

<div class="modal fade cocktail-popup" data-bs-backdrop="static" data-bs-keyboard="false" id="manage-bars" tabindex="-1" aria-labelledby="Новий бар" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen-lg-down">
        <div class="modal-content">
            <div class="modal-header cocktail-popup-header">
                <h2 class="modal-title cocktail-popup-title" id="exampleModalLabel">Мої бари</h2>
                <button id="close-manage-bar-popup" type="button" class="btn-close cocktail-popup-close-btn" data-bs-dismiss="modal" aria-label="Close" @onclick="ResetPopup"></button>
            </div>
            
            @if (!Loading) {
                <div class="modal-body add-bar-form pb-0">
                    <ul class="list-group list-group-flush list-group-item-action">
                        @foreach (var profile in _profiles) {
                            <li class="list-group-item list-group-item-action bar-option py-3 px-0" style="display: flex; justify-content: space-between; align-items: center">
                                @profile.Name
                                <button type="button" class="btn btn-link p-0 edit-bar-name-button" @onclick="() => EditName(profile)">Редагувати</button>

                                @if (profile.Id != 1) {
                                    <button type="button" class="btn btn-link p-0 delete-bar-button" @onclick="async () => await DeleteBarAsync(profile)">Видалити</button>
                                }
                            </li>
                        }
                    </ul>
                </div>
                <div class="modal-footer popup-bar-footer p-3">
                    @if (_editMode == false) {
                        <input type="text" class="form-control m-0" id="bar-name" placeholder="новий бар" @bind="_barName">
                        <button type="button" class="btn btn-link m-0 p-0" style="margin-left: 1rem !important;" @onclick="async () => await AddProfileAsync()">Додати</button>
                    }
                    else {
                        <input type="text" class="form-control m-0" id="bar-name" placeholder="@($"Редагувати {_barNameToEdit}")" @bind="_barNameToEdit">
                        <button type="button" class="btn btn-link m-0 p-0" style="margin-left: 1rem !important;" @onclick="async () => await EditProfileAsync()">Зберегти</button>

                    }
                    @if (_invalid) {
                        <p class="text-danger mt-3">@_validationMessage</p>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Profile> _profiles = null!;
    private bool Loading { get; set; } = true;
    private string _barName { get; set; } = "";
    private string _barNameToEdit { get; set; } = "";
    private int _barIdToEdit { get; set; }


    protected override async Task OnInitializedAsync() {
        _profiles = await DataService.LoadProfilesAsync();
        Loading = false;
    }
    
    private bool _editMode;

    private string _validationMessage = "";
    private bool _invalid;
    
    private const int MaxBarNameLength = 40;
    
    private async Task AddProfileAsync() {
        if (_barName.Length > MaxBarNameLength) {
            _invalid = true;
            _validationMessage = "Менше креативу.";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(_barName)) {
            _invalid = true;
            _validationMessage = "Введи назву бару.";
            return;
        }

        if (_profiles.Any(p => p.Name.Equals(_barName, StringComparison.InvariantCultureIgnoreCase))) {
            _invalid = true;
            _validationMessage = "Придумай креативнішу назву.";
            return;
        }

        _invalid = false;
        _validationMessage = "";

        await ProfileService.AddProfileAsync(_barName);
        _profiles = await DataService.LoadProfilesAsync();
        await BarStateService.RefreshBarListAsync();
        _barName = "";
    }

    private async Task EditProfileAsync() {
        if (_barNameToEdit.Length > MaxBarNameLength) {
            _invalid = true;
            _validationMessage = "Менше креативу.";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(_barNameToEdit)) {
            _invalid = true;
            _validationMessage = "Введи назву бару.";
            return;
        }
        
        if (_profiles.Any(p => p.Name.Equals(_barNameToEdit, StringComparison.InvariantCultureIgnoreCase) && p.Id != _barIdToEdit)) {
            _invalid = true;
            _validationMessage = "Придумай креативнішу назву.";
            return;
        }
        
        _invalid = false;
        _validationMessage = "";
        
        
        
        await ProfileService.EditProfileAsync(_barNameToEdit, _barIdToEdit);
        _profiles = await DataService.LoadProfilesAsync();
        await BarStateService.RefreshBarListAsync();
        
        _barIdToEdit = 0;
        _barNameToEdit = "";
        _editMode = false;
    }

    private async Task DeleteBarAsync(Profile profile) {
        await DataService.DeleteBarAsync(new Bar {Id = profile.Id, Name = profile.Name});
        await ProfileService.DeleteProfileAsync(profile);
        await BarStateService.RefreshBarListAsync();

        if (await BarStateService.GetBarAsync() == profile.Id) {
            await BarStateService.SetBarAsync(-1);
        }

        _profiles = await DataService.LoadProfilesAsync();
        _invalid = false;
        _validationMessage = "";
        _barName = "";
    }
    
    private void EditName(Profile profile) {
        _editMode = true;
        _barNameToEdit = profile.Name;
        _barIdToEdit = profile.Id;
    }

    private void ResetPopup() {
        _barName = "";
        _barIdToEdit = 0;
        _barNameToEdit = "";
        _editMode = false;
        _invalid = false;
        _validationMessage = "";
    }

    // private async Task ClosePopup() {
    //     _barName = "";
    //     _barIdToEdit = 0;
    //     _barNameToEdit = "";
    //     _editMode = false;
    //     _invalid = false;
    //     _validationMessage = "";
    //     await JSRuntime.InvokeVoidAsync("closeAddBarPopup");
    // }
    //
    // private async Task OnBarPopupOpenAsync() {
    //     await JSRuntime.InvokeVoidAsync("openAddBarPopup");
    // }


}

<script>
    function closeBarPopup() {
        let cocktailModal = new bootstrap.Modal('#manage-bars');
        cocktailModal.hide();
    }
    
    function openBarPopup() {
       let cocktailModal = new bootstrap.Modal('#manage-bars');
       cocktailModal.show();
    }
</script>