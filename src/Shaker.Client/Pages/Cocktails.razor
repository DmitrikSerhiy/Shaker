@page "/cocktails"
@using Shaker.Client.Services
@using Shaker.Client.Dtos
@inject CocktailService CocktailService
@inject DataService DataService

<PageTitle>Available cocktails</PageTitle>

<h1>Available cocktails</h1>

@if(_loading) {
    <p>
        <em>Loading...</em>
    </p>
}
else {
    if (_failed) {
        <p>
            <em>@_errorMessage</em>
        </p>
    }
    else if (_ingredientsEmpty) {
        <p>
            <em>Ingredients are not set</em>
        </p>
    }
    else if (_myIngredientsEmpty) {
        <p>
            <em>Bar is empty. Add some ingredients.</em>
        </p>
    }
    else if(_cocktailsEmpty) {
        <p>
            <em>Cocktail recipes are not set</em>
        </p>
    } else if (_availableCocktails.Count == 0) {
        <p>
            <em>No cocktails can be made with available ingredients</em>
        </p>
    }
    else {
        <table class="table">
            <thead>
            <tr>
                <th>Cocktail</th>
                <th>Ingredients</th>
                <th>Recipe</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var cocktail in _availableCocktails) {
                <tr>
                    <td>@cocktail.Name</td>
                    <td>@string.Join(", ", cocktail.Ingredients.Select(i => i.Name))</td>
                    <td>@cocktail.Recipe</td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private List<Cocktail> _availableCocktails = new();
    
    private bool _ingredientsEmpty;
    private bool _cocktailsEmpty;
    private bool _myIngredientsEmpty;
    
    private bool _loading = true;
    private bool _failed;
    private string _errorMessage = "";

    protected override async Task OnInitializedAsync() {
        List<Cocktail> allCocktails;
        List<Ingredient> allIngredients;
        Bar? bar;

        try {
            allCocktails = await DataService.LoadCocktailsAsync();
            if (allCocktails.Count == 0) {
                _cocktailsEmpty = true;
                _loading = false;
                return;
            }
        } catch {
            _failed = true;
            _errorMessage = "Failed to load cocktail recipes";
            _loading = false;
            return;
        }
        
        try {
            allIngredients = await DataService.LoadIngredientsAsync();
            if (allIngredients.Count == 0) {
                _ingredientsEmpty = true;
                _loading = false;
                return;
            }
        } catch {
            _failed = true;
            _errorMessage = "Failed to load ingredients";
            _loading = false;
            return;
        }

        try {
            foreach(var cocktail in allCocktails) {
                cocktail.Ingredients = allIngredients
                    .Where(ingredient => cocktail.Ingredients.Any(i => i.Id == ingredient.Id))
                    .ToList();
            }
        } catch {
            _failed = true;
            _errorMessage = "Failed to load cocktails ingredients";
            _loading = false;
            return;
        }

        try {
            bar = await DataService.LoadBarAsync();
            if (bar == null || bar.Ingredients.Count == 0) {
                _loading = false;
                _myIngredientsEmpty = true;
                return;
            }
            bar.Ingredients = allIngredients
                .Where(ingredient => bar.Ingredients.Any(i => i.Id == ingredient.Id))
                .ToList();
        } catch {
            _failed = true;
            _errorMessage = "Failed to load your bar ingredients";
            _loading = false;
            return;
        }

        _availableCocktails = CocktailService.GetAvailableCocktails(bar.Ingredients, allCocktails).ToList();
        _loading = false;
    }
}