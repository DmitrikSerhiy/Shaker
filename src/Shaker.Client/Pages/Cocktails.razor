@page "/cocktails"
@using Shaker.Client.Services
@using Shaker.Client.Dtos
@using Shaker.Client.Helpers
@inject DataService DataService
@implements IDisposable

<PageTitle>Коктельна карта</PageTitle>
<h1>Коктельна карта</h1>

@if(_loading) {
    <p>
        <em>Завантаження...</em>
    </p>
}
else {
    if (_failed) {
        <p>
            <em>@_errorMessage</em>
        </p>
    }
    else if (_ingredientsEmpty) {
        <p>
            <em>Інгрідієнти недоступні.</em>
        </p>
    }
    else if(_cocktailsEmpty) {
        <p>
            <em>Коктейлі недоступні.</em>
        </p>
    }
    else {
        <input type="text" @bind="_searchQuery" @oninput="OnInput" placeholder="Знайти коктейль, інгрідієнт..." />
        
        <table class="table">
            <thead>
            <tr>
                <th>Коктейль</th>
                <th>Інгрідієнти</th>
                <th>Рецепт</th>
                <th>Шот</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var cocktail in _searchedCocktails) {
                <tr>
                    <td>@cocktail.Name</td>
                    <td>@string.Join(", ", cocktail.Ingredients.Select(i => i.Name))</td>
                    <td>@cocktail.Recipe</td>
                    <td>
                        @if (cocktail.Type == CocktailType.Shot) {
                            <span>+</span>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private List<Cocktail> _allCocktails = new();
    private List<Cocktail> _searchedCocktails = new();
    
    private bool _ingredientsEmpty;
    private bool _cocktailsEmpty;
    
    private bool _loading = true;
    private bool _failed;
    private string _errorMessage = "";
    
    private string _searchQuery = "";
    private Timer? _debounceSearchTimer;


    protected override async Task OnInitializedAsync() {
        List<Ingredient> allIngredients;
        _debounceSearchTimer = new Timer(Search, null, Timeout.Infinite, Timeout.Infinite);

        try {
            _allCocktails = await DataService.LoadCocktailsAsync();
            _searchedCocktails = _allCocktails.ToList();
            if (_allCocktails.Count == 0) {
                _cocktailsEmpty = true;
                _loading = false;
                return;
            }
        } catch {
            _failed = true;
            _errorMessage = "Failed to load cocktail recipes";
            _loading = false;
            return;
        }
        
        try {
            allIngredients = await DataService.LoadIngredientsAsync();
            if (allIngredients.Count == 0) {
                _ingredientsEmpty = true;
                _loading = false;
                return;
            }
        } catch {
            _failed = true;
            _errorMessage = "Failed to load ingredients";
            _loading = false;
            return;
        }

        try {
            foreach(var cocktail in _allCocktails) {
                cocktail.Ingredients = allIngredients
                    .Where(ingredient => cocktail.Ingredients.Any(i => i.Id == ingredient.Id))
                    .ToList();
            }
        } catch {
            _failed = true;
            _errorMessage = "Failed to load cocktails ingredients";
            _loading = false;
            return;
        }

        _loading = false;
    }

    private void OnInput(ChangeEventArgs e)
    {
        _searchQuery = e.Value?.ToString() ?? "";
        _debounceSearchTimer!.Change(250, Timeout.Infinite);
    }
    
    private async void Search(object? state)
    {
        await InvokeAsync(() => {
            _searchedCocktails = string.IsNullOrWhiteSpace(_searchQuery) 
                ? _allCocktails 
                : _allCocktails
                    .Where(c => 
                        c.Name.Contains(_searchQuery, StringComparison.InvariantCultureIgnoreCase) || 
                        c.Ingredients.Any(i => i.Name.Contains(_searchQuery, StringComparison.InvariantCultureIgnoreCase)))
                    .ToList();
            StateHasChanged();
        });
    }

    public void Dispose() {
        _debounceSearchTimer?.Dispose();
    }
}