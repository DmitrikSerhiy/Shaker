@page "/"
@using Shaker.Client.Services
@using Shaker.Client.Dtos
@using Shaker.Client.Helpers
@inject CocktailService CocktailService
@inject DataService DataService
@inject RandomCocktailService RandomCocktailService
@inject CocktailsStateService CocktailsStateService
@inject BarStateService BarStateService
@inject IJSRuntime JSRuntime
@implements IDisposable


<div class="container-fluid my-cocktails-page-wrapper">
    <div class="container text-center my-cocktails-header">
        <h2>Мої коктейлі</h2>

        @if (_loading) {
            <p>Завантаження...</p>
        }
        else {
            if (_failed) {
                <p>@_errorMessage</p>
            }
            else if (_currentBarId == -1) {
                <button type="button" class="btn btn-link cocktails-menu-link" data-bs-toggle="offcanvas" data-bs-target="#shaker-menu">Обери бар</button>
            }
            else if (_ingredientsEmpty) {
                <p>Інгрідієнти недоступні.</p>
            }
            else if (_myIngredientsEmpty) {
                <p>Бар порожній. Додай інгрідієнти.</p>
            }
            else if (_cocktailsEmpty) {
                <p>Коктейлі недоступні.</p>
            }
            else if (_availableCocktails.Count == 0) {
                <p>Неможливо приготувати смачний коктейль із наявних інгрідієнтів. Тіко не змішуй все, що є у твоєму барі. Краще випий чаю.</p>
            }
            else {
                <div class="input-group mb-3 cocktail-input">
                    <input id="search-available-cocktails" type="text" class="form-control" placeholder="Знайти за назвою або інгрідієнтами" aria-label="Знайти за назвою або рецептом" aria-describedby="filter-button" @bind="_searchQuery" @oninput="OnInput">
                    <button class="btn btn-outline-secondary inline-cocktails-button" type="button" @onclick="OpenRandomCocktail" title="Випадковий коктейль">
                        <svg height="32" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
                            <path fill="none" stroke="#6c757d" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M448,341.37V170.61A32,32,0,0,0,432.11,143l-152-88.46a47.94,47.94,0,0,0-48.24,0L79.89,143A32,32,0,0,0,64,170.61V341.37A32,32,0,0,0,79.89,369l152,88.46a48,48,0,0,0,48.24,0l152-88.46A32,32,0,0,0,448,341.37Z"/>
                            <polyline fill="none" stroke="#6c757d" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" points="69 153.99 256 263.99 443 153.99"/>
                            <line fill="none" stroke="#6c757d" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" x1="256" y1="463.99" x2="256" y2="263.99"/>
                            <ellipse cx="256" cy="152" rx="24" ry="16" fill="#6c757d"/>
                            <ellipse cx="208" cy="296" rx="16" ry="24" fill="#6c757d"/>
                            <ellipse cx="112" cy="328" rx="16" ry="24" fill="#6c757d"/>
                            <ellipse cx="304" cy="296" rx="16" ry="24" fill="#6c757d"/>
                            <ellipse cx="400" cy="240" rx="16" ry="24" fill="#6c757d"/>
                            <ellipse cx="304" cy="384" rx="16" ry="24" fill="#6c757d"/>
                            <ellipse cx="400" cy="328" rx="16" ry="24" fill="#6c757d"/>
                        </svg>
                    </button>
                    <button class="btn btn-outline-secondary inline-cocktails-button" type="button" @onclick="ToggleFilters" title="Фільтри" data-bs-toggle="collapse" data-bs-target="#cocktail-filters" aria-expanded="false" aria-controls="cocktail-filters">
                        <svg height="32" viewBox="0 -960 960 960" xmlns="http://www.w3.org/2000/svg">
                            <path fill="#6c757d" d="M440-160q-17 0-28.5-11.5T400-200v-240L161-745q-14-17-4-36t31-19h584q21 0 31 19t-4 36L560-440v240q0 17-11.5 28.5T520-160h-80Zm40-276 240-304H240l240 304Zm0 0Z"/>
                        </svg>
                    </button>
                </div>

                <div id="cocktail-filters" class="input-group cocktails-filters collapse">
                    <div class="cocktails-filter-input-group">
                        <div class="form-check form-check-inline">
                            <input id="all-source" class="form-check-input cocktail-filter-form-check" type="radio" name="cocktailSource" checked=@(_filteredByType == 0) value="0" @onchange="@(_ => FilterCocktailsByType(0))">
                            <label class="form-check-label" for="all-source">Всі</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input id="classic-source" class="form-check-input cocktail-filter-form-check" type="radio" name="cocktailSource" checked=@(_filteredByType == 1) value="1" @onchange="@(_ => FilterCocktailsByType(1))">
                            <label class="form-check-label" for="classic-source">Лонг</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input id="my-source" class="form-check-input cocktail-filter-form-check" type="radio" name="cocktailSource" checked=@(_filteredByType == 2) value="2" @onchange="@(_ => FilterCocktailsByType(2))">
                            <label class="form-check-label" for="my-source">Шот</label>
                        </div>
                    </div>

                    <span class="filter-separator">|</span>

                    <div class="cocktails-filter-input-group">
                        <div class="form-check form-check-inline">
                            <input id="all-type" class="form-check-input cocktail-filter-form-check" type="radio" name="cocktailType" checked=@(_filteredBySource == 0) value="0" @onchange="@(_ => FilterCocktailsBySource(0))">
                            <label class="form-check-label" for="all-type">Всі</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input id="long-type" class="form-check-input cocktail-filter-form-check" type="radio" name="cocktailType" checked=@(_filteredBySource == 1) value="1" @onchange="@(_ => FilterCocktailsBySource(1))">
                            <label class="form-check-label" for="long-type">Класичні</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input id="shot-type" class="form-check-input cocktail-filter-form-check" type="radio" name="cocktailType" checked=@(_filteredBySource == 2) value="2" @onchange="@(_ => FilterCocktailsBySource(2))">
                            <label class="form-check-label" for="shot-type">Кастомні</label>
                        </div>
                    </div>

                    <span class="filter-separator">|</span>

                    <div class="cocktails-filter-input-group">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="show-hidden" @onchange="@(_ => ToggleHiddenCocktails())">
                            <label class="form-check-label" for="show-hidden">Показати приховані</label>
                        </div>
                    </div>

                    <div class="filters-margin"></div>
                </div>
            }
        }
    </div>

    @if (_loading == false && _failed == false && _currentBarId != -1 && _ingredientsEmpty == false && _myIngredientsEmpty == false && _cocktailsEmpty == false && _availableCocktails.Count != 0) {
        <div id="my-cocktails-content-wrapper" class="my-cocktails-content-wrapper container-fluid">
            <div class="container">
                <div class="row gx-3 row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-3">
                    @foreach (var cocktail in _searchedCocktails) {
                        <CocktailCard
                            Cocktail="cocktail"
                            BarId="_currentBarId"
                            OnFavoriteToggled="async () => await RefreshAsync()"
                            OnHiddenToggled="async () => await RefreshAsync()">
                        </CocktailCard>
                    }
                </div>
            </div>
        </div>
    }

</div>
@code {
    private List<Cocktail> _availableCocktails = new();
    private List<Cocktail> _searchedCocktails = new();

    private bool _ingredientsEmpty;
    private bool _cocktailsEmpty;
    private bool _myIngredientsEmpty;

    private bool _loading = true;
    private bool _failed;
    private string _errorMessage = "";

    private bool _showFilters;
    private int _filteredBySource;
    private int _filteredByType;
    private bool _showHiddenCocktails;

    private int _currentBarId = -1;

    private string _searchQuery = "";
    private Timer? _debounceSearchTimer;

    private List<Cocktail> _allCocktails = null!;
    private List<Ingredient> _allIngredients = null!;
    private Bar _bar = new();

    protected override async Task OnInitializedAsync() {
        _debounceSearchTimer = new Timer(FilterCocktailsByName, null, Timeout.Infinite, Timeout.Infinite);
        BarStateService.OnCurrentBarChange += OnCurrentBarBarChanged;
        await LoadAndSetBarAsync();
        _loading = false;
    }

    private async Task OnCurrentBarBarChanged() {
        DataService.ClearCachedBar();
        await RefreshAsync();
        StateHasChanged();
    }

    private void OnInput(ChangeEventArgs e) {
        _searchQuery = e.Value?.ToString() ?? "";
        _debounceSearchTimer!.Change(250, Timeout.Infinite);
    }

    private async Task RefreshAsync() {
        _availableCocktails = new();
        _searchedCocktails = new();
        _bar = new Bar();
        _ingredientsEmpty = false;
        _cocktailsEmpty = false;
        _myIngredientsEmpty = false;

        _loading = true;
        _failed = false;
        _errorMessage = "";

        _showFilters = false;
        _filteredBySource = 0;
        _filteredByType = 0;

        _showHiddenCocktails = false;

        _currentBarId = await BarStateService.GetBarAsync();

        _searchQuery = "";
        _debounceSearchTimer = new Timer(FilterCocktailsByName, null, Timeout.Infinite, Timeout.Infinite);
        await LoadAndSetBarAsync();
        _loading = false;
    }

    private async Task LoadAndSetBarAsync() {
        _currentBarId = await BarStateService.GetBarAsync();
        if (_currentBarId == -1) {
            await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
            return;
        }

        // load all cocktails
        try {
            _allCocktails = await DataService.LoadCocktailsAsync();
            await CocktailsStateService.SetAllCocktailsCountAsync(_allCocktails.Count);
            if (_allCocktails.Count == 0) {
                _cocktailsEmpty = true;
                await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
                _loading = false;
                return;
            }
        }
        catch {
            _failed = true;
            _errorMessage = "Не вдалося завантажити рецепти коктейлів.";
            _loading = false;
            await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
            return;
        }

        // load all ingredients
        try {
            _allIngredients = await DataService.LoadIngredientsAsync();
            if (_allIngredients.Count == 0) {
                _ingredientsEmpty = true;
                _loading = false;
                await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
                return;
            }
        }
        catch {
            _failed = true;
            _errorMessage = "Не вдалося завантажити інгрідієнти.";
            _loading = false;
            await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
            return;
        }

        // map all cocktails
        foreach (var cocktail in _allCocktails) {
            cocktail.Ingredients = _allIngredients
                .Where(ingredient => cocktail.Ingredients.Any(i => i.Id == ingredient.Id))
                .ToList();
            if (cocktail.OptionalIngredients != null) {
                cocktail.OptionalIngredients = _allIngredients
                    .Where(ingredient => cocktail.OptionalIngredients.Any(i => i.Id == ingredient.Id))
                    .ToList();
            }
        }

        // load bar
        try {
            _bar = await DataService.LoadBarAsync(_currentBarId);
            if (_bar.Ingredients.Count == 0) {
                _loading = false;
                _myIngredientsEmpty = true;
                await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
                return;
            }
            _bar.Ingredients = _allIngredients
                .Where(ingredient => _bar.Ingredients.Any(i => i.Id == ingredient.Id))
                .ToList();
        }
        catch {
            _failed = true;
            _errorMessage = "Не вдалося завантажити бар.";
            _loading = false;
            await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
            return;
        }

        _availableCocktails = CocktailService.GetAvailableCocktails(_bar, _allCocktails);
        _availableCocktails = CocktailService.MapAndSortFavoriteCocktails(_bar, _availableCocktails);
        _searchedCocktails = _showHiddenCocktails
            ? _availableCocktails
            : _availableCocktails.Where(c => c.IsHidden == false).ToList();

        await CocktailsStateService.SetCalculatedCocktailsCountsAsync(_availableCocktails.Count, _bar.Ingredients.Count);
    }

    private void FilterCocktails() {
        var searched = _availableCocktails.AsQueryable();
        if (!string.IsNullOrWhiteSpace(_searchQuery)) {
            searched = SearchHelper.FilterCocktailsByName(searched, _searchQuery);
        }

        if (_filteredBySource != 0) {
            searched = SearchHelper.FilterCocktailsBySource(searched, _filteredBySource);
        }

        if (_filteredByType != 0) {
            searched = SearchHelper.FilterCocktailsByType(searched, (CocktailType)_filteredByType);
        }

        _searchedCocktails = searched.ToList();
    }

    private void FilterCocktailsByType(int type) {
        _filteredByType = type;
        FilterCocktails();
    }

    private void FilterCocktailsBySource(int source) {
        _filteredBySource = source;
        FilterCocktails();
    }

    private async void FilterCocktailsByName(object? state) {
        await InvokeAsync(() => {
            FilterCocktails();
            StateHasChanged();
        });
    }

    private void ToggleFilters() {
        _showFilters = !_showFilters;
        if (!_showFilters) {
            _filteredBySource = 0;
            _filteredByType = 0;
            _showHiddenCocktails = false;
            FilterCocktails();
        }
    }

    private void ToggleHiddenCocktails() {
        _showHiddenCocktails = !_showHiddenCocktails;
        _searchedCocktails = _showHiddenCocktails
            ? _availableCocktails
            : _availableCocktails.Where(c => c.IsHidden == false).ToList();
    }

    private void OpenRandomCocktail() {
        var randomCocktail = new Random().Next(_availableCocktails.Count);
        var cocktailId = _availableCocktails[randomCocktail].Id;

        OpenCocktailPopup(cocktailId);
    }

    private void OpenCocktailPopup(int cocktailId) {
        RandomCocktailService.OpenRandomCocktailPopup(cocktailId);
    }

    public void Dispose() {
        BarStateService.OnCurrentBarChange -= OnCurrentBarBarChanged;
        _debounceSearchTimer?.Dispose();
    }
}

<script>
    (() => {
        let toTopButton = document.getElementById("to-top");
        if (toTopButton) {
           toTopButton.style.display = "none";
        }
    
        setTimeout(() => {
            let myCocktailsScrollable = document.getElementById("my-cocktails-content-wrapper");
            let toTopButton = document.getElementById("to-top");
                
            myCocktailsScrollable.addEventListener('scroll',(event) => {
                if (event.target.scrollTop > 400) {
                    toTopButton.style.display = "flex";
                } else {
                    toTopButton.style.display = "none";
                }
            });
    
        }, 1000);
    })()
</script>