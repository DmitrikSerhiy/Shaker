@using Shaker.Client.Dtos
@using Shaker.Client.Services
@inject IJSRuntime JSRuntime
@inject DataService DataService
@inject ProfileService ProfileService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@if (!Loading) {
    <div class="input-group mb-3">
        <label class="input-group-text" for="select-profile">Бар:</label>
        <select id="select-profile" @onchange="OnBarPick" class="form-select form-select cocktails-select" style="padding: 1rem" aria-label="Обери бар">
            <option value="-1">Обери бар</option>
            @foreach (var profile in _profiles) {
                <option value="@profile.Id" selected=@(profile.Id == BarId)>@profile.Name</option>
            }
        </select>
        <button class="btn btn-outline-secondary inline-cocktails-button add-bar-button" type="button" data-bs-toggle="modal" data-bs-target="#add-bar">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" width="32"><path fill="#6c757d" d="M480-120v-71l216-216 71 71-216 216h-71ZM120-330v-60h300v60H120Zm690-49-71-71 29-29q8-8 21-8t21 8l29 29q8 8 8 21t-8 21l-29 29ZM120-495v-60h470v60H120Zm0-165v-60h470v60H120Z"/></svg>
        </button>
    </div>
    
    <div class="modal fade cocktail-popup" id="add-bar" tabindex="-1" aria-labelledby="Новий бар" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-fullscreen-lg-down">
            <div class="modal-content">
                <div class="modal-header cocktail-popup-header">
                    <h2 class="modal-title cocktail-popup-title" id="exampleModalLabel">Керування барами</h2>
                    <button id="close-add-bar-popup" type="button" class="btn-close cocktail-popup-close-btn" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body add-bar-form pb-0">
                    <ul class="list-group list-group-flush list-group-item-action">
                        @foreach (var profile in _profiles) {
                            <li class="list-group-item list-group-item-action bar-option py-3 px-0" style="display: flex; justify-content: space-between; align-items: center">
                                @profile.Name
                                @if (profile.Id != 1) { 
                                    <button type="button" class="btn btn-link p-0" @onclick="async () => await DeleteBarAsync(profile)">Видалити</button>
                                }
                            </li>
                        }
                    </ul>
                </div>
                <div class="modal-footer popup-bar-footer p-3">
                    <input type="text" class="form-control m-0" id="bar-name" placeholder="новий бар" @bind="_barName">
                    <button type="button" class="btn btn-link m-0 p-0" style="margin-left: 1rem !important;" @onclick="async () => await AddProfileAsync()">Додати</button>
                     @if (_invalid) {
                            <p class="text-danger mt-3">@_validationMessage</p>
                        }
                </div>
            </div>
        </div>
    </div>
}

<script>
    function closeAddBarPopup() {
        document.getElementById("close-add-bar-popup").click();
    }
</script>

@code {
    [Parameter] 
    public int BarId { get; set; }

    [Parameter] 
    public EventCallback<int> OnBarPicked { get; set; }

    private List<Profile> _profiles = null!;
    private bool Loading { get; set; } = true;
    private string _barName { get; set; } = "";

    protected override async Task OnInitializedAsync() {
        _profiles = await DataService.LoadProfilesAsync();
        Loading = false;
    }

    private async Task OnBarPick(ChangeEventArgs e) {
        var barId = Int32.Parse(e.Value!.ToString()!);
        await OnBarPicked.InvokeAsync(barId);
    }

    private string _validationMessage = "";
    private bool _invalid = false;

    private async Task AddProfileAsync() {
        if (string.IsNullOrWhiteSpace(_barName)) {
            _invalid = true;
            _validationMessage = "Введи назву бару.";
            return;
        }

        if (_profiles.Any(p => p.Name.Equals(_barName, StringComparison.InvariantCultureIgnoreCase))) {
            _invalid = true;
            _validationMessage = "Придумай креативнішу назву.";
            return;
        }

        _invalid = false;
        _validationMessage = "";

        await ProfileService.AddProfileAsync(_barName);
        _profiles = await DataService.LoadProfilesAsync();
        _barName = "";
    }
    
    private async Task DeleteBarAsync(Profile profile) {
        await DataService.DeleteBarAsync(new Bar {Id = profile.Id, Name = profile.Name});
        await ProfileService.DeleteProfileAsync(profile);
        if (BarId == profile.Id) {
            DataService.ClearCachedBar();
            BarId = -1;
            await LocalStorage.RemoveItemAsync("currentBar");
            await OnBarPicked.InvokeAsync(-1);
        }

        _profiles = await DataService.LoadProfilesAsync();
        _invalid = false;
        _validationMessage = "";
        _barName = "";
    }
    
    private async Task ClosePopup() {
        _barName = "";
        _invalid = false;
        _validationMessage = "";
        await JSRuntime.InvokeVoidAsync("closeAddBarPopup");
    }
}