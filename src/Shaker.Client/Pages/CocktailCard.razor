@using Shaker.Client.Dtos
@using Shaker.Client.Helpers
@using Shaker.Client.Services
@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime
@inject BarService BarService
@inject RandomCocktailService RandomCocktailService
@implements IDisposable

<div class="modal fade cocktail-popup" id=@($"{Cocktail.Id}-cocktail-modal") data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="@Cocktail.Name" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen-lg-down modal-lg">
        <div class="modal-content">
            <div class="modal-header cocktail-popup-header">
                <h2 class="modal-title cocktail-popup-title" id="exampleModalLabel">@Cocktail.Name</h2>
                <button type="button" class="btn-close cocktail-popup-close-btn" data-bs-dismiss="modal" @onclick="async () => await ResetCocktailPopupAsync(Cocktail.Id)" aria-label="Close"></button>
            </div>
            <div class="modal-body cocktail-popup-body row gx-3 row-cols-1 row-cols-sm-1 row-cols-md-1 row-cols-lg-2">
                <div class="cocktail-popup-image-container col">
                    @if (string.IsNullOrWhiteSpace(Cocktail.ImageUrl)) {
                        <DefaultCocktailImage></DefaultCocktailImage>
                    }
                    else {
                        <img src="@Cocktail.ImageUrl" class="cocktail-popup-image" alt="cocktail">
                    }
                </div>
                <div class="cocktail-popup-info-container col">
                    <div class="accordion accordion-flush open" id="@($"cocktails-info-accordion-{Cocktail.Id}")">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="@($"flush-heading-recipe-{Cocktail.Id}")">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="@($"#flush-collapse-recipe-{Cocktail.Id}")" aria-expanded="true" aria-controls="@($"flush-collapse-recipe-{Cocktail.Id}")">
                                    Рецепт
                                </button>
                            </h2>
                            <div id="@($"flush-collapse-recipe-{Cocktail.Id}")" class="accordion-collapse collapse show" aria-labelledby="@($"flush-heading-recipe-{Cocktail.Id}")" data-bs-parent="@($"#cocktails-info-accordion-{Cocktail.Id}")">
                                <div class="accordion-body">
                                    <p class="card-text my-3">@ModifyRecipe(Cocktail.Recipe)</p>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="@($"flush-heading-ingredients-{Cocktail.Id}")">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="@($"#flush-collapse-ingredients-{Cocktail.Id}")" aria-expanded="false" aria-controls="@($"flush-collapse-ingredients-{Cocktail.Id}")">
                                    Інгрідієнти
                                </button>
                            </h2>
                            <div id="@($"flush-collapse-ingredients-{Cocktail.Id}")" class="accordion-collapse collapse" aria-labelledby="@($"flush-heading-ingredients-{Cocktail.Id}")" data-bs-parent="@($"#cocktails-info-accordion-{Cocktail.Id}")" >
                                <div class="accordion-body">
                                    <ul class="list-group list-group-flush text-left">
                                        @foreach (var ingredient in Cocktail.Ingredients) {
                                            <li class="list-group-item">@ingredient.Name</li>
                                        }
                                        @if (Cocktail.OptionalIngredients != null) {
                                            <p class="mt-3">Опціональні інгрідієнти</p>
                                            @foreach (var ingredient in Cocktail.OptionalIngredients) {
                                                <li class="list-group-item">@ingredient.Name</li>
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="col mb-3">
    <div class="card mx-auto cocktail-card">
        <h2 class="card-title cocktail-name">@Cocktail.Name</h2>
        <div class="image-wrapper">
            @if (!IgnoreFavoriteAndHideIcons) {
                <div id="@($"{Cocktail.Id}-cocktail-favorite")" class="icons-container-left" @onclick="async () => await HideUnHideCocktailAsync()" data-bs-toggle="tooltip"  title="@(Cocktail.IsHidden ? "За цим я вже заскучав, показувати знову" : "Приховати")">
                    @if (Cocktail.IsHidden) {
                        <svg class="cocktail-icon" width="32" height="29" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960">
                            <path d="M480-320q75 0 127.5-52.5T660-500q0-75-52.5-127.5T480-680q-75 0-127.5 52.5T300-500q0 75 52.5 127.5T480-320Zm0-72q-45 0-76.5-31.5T372-500q0-45 31.5-76.5T480-608q45 0 76.5 31.5T588-500q0 45-31.5 76.5T480-392Zm0 192q-146 0-266-81.5T40-500q54-137 174-218.5T480-800q146 0 266 81.5T920-500q-54 137-174 218.5T480-200Zm0-300Zm0 220q113 0 207.5-59.5T832-500q-50-101-144.5-160.5T480-720q-113 0-207.5 59.5T128-500q50 101 144.5 160.5T480-280Z"/>
                        </svg>
                    }
                    else {
                        <svg class="cocktail-icon" width="32" height="29" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960">
                            <path d="m644-428-58-58q9-47-27-88t-93-32l-58-58q17-8 34.5-12t37.5-4q75 0 127.5 52.5T660-500q0 20-4 37.5T644-428Zm128 126-58-56q38-29 67.5-63.5T832-500q-50-101-143.5-160.5T480-720q-29 0-57 4t-55 12l-62-62q41-17 84-25.5t90-8.5q151 0 269 83.5T920-500q-23 59-60.5 109.5T772-302Zm20 246L624-222q-35 11-70.5 16.5T480-200q-151 0-269-83.5T40-500q21-53 53-98.5t73-81.5L56-792l56-56 736 736-56 56ZM222-624q-29 26-53 57t-41 67q50 101 143.5 160.5T480-280q20 0 39-2.5t39-5.5l-36-38q-11 3-21 4.5t-21 1.5q-75 0-127.5-52.5T300-500q0-11 1.5-21t4.5-21l-84-82Zm319 93Zm-151 75Z"/>
                        </svg>
                    }
                </div>

                <div id="@($"{Cocktail.Id}-cocktail-hide")" class="icons-container-right" @onclick="async () => await ToggleFavoriteAsync()" data-bs-toggle="tooltip"  title="@(Cocktail.IsFavorite ? "Обожнюю!" : "Пройшла любов, зав'яли помідори")">
                    @if (Cocktail.IsFavorite) {
                        <svg class="cocktail-icon" width="32" height="29" viewBox="0 0 32 29" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M16 1.61804L19.1167 11.2102L19.229 11.5557H19.5922H29.6781L21.5184 17.484L21.2246 17.6976L21.3368 18.0431L24.4535 27.6353L16.2939 21.7069L16 21.4934L15.7061 21.7069L7.54649 27.6353L10.6632 18.0431L10.7754 17.6976L10.4816 17.484L2.32194 11.5557H12.4078H12.771L12.8833 11.2102L16 1.61804Z" fill="#CB500B" stroke="black"/>
                        </svg>
                    }
                    else {
                        <svg class="cocktail-icon" width="32" height="29" viewBox="0 0 32 29" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M16 1.61804L19.1167 11.2102L19.229 11.5557H19.5922H29.6781L21.5184 17.484L21.2246 17.6976L21.3368 18.0431L24.4535 27.6353L16.2939 21.7069L16 21.4934L15.7061 21.7069L7.54649 27.6353L10.6632 18.0431L10.7754 17.6976L10.4816 17.484L2.32194 11.5557H12.4078H12.771L12.8833 11.2102L16 1.61804Z" stroke="black"/>
                        </svg>
                    }
                </div>
            }
            <div id="@($"{Cocktail.Id}-cocktail-glass-type")" class="icons-container-left-down" data-bs-toggle="tooltip" data-bs-placement="right" title="@(Cocktail.GlassType.GetGlassName())">
                <CocktailGlass GlassId="@Cocktail.GlassType"></CocktailGlass>
            </div>
            <div class="cocktail-image-in-card" data-bs-toggle="modal" data-bs-target=@($"#{Cocktail.Id}-cocktail-modal")>
                @if (string.IsNullOrWhiteSpace(Cocktail.ImageUrl)) {
                    <DefaultCocktailImage></DefaultCocktailImage>
                }
                else {
                    <img src="@Cocktail.ImageUrl" class="card-img-top cocktail-image" alt="cocktail">
                }
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Cocktail Cocktail { get; set; } = new();
    
    [Parameter]
    public bool IgnoreFavoriteAndHideIcons { get; set; }
    
    [Parameter] 
    public int BarId { get; set; }
    
    [Parameter] 
    public EventCallback OnFavoriteToggled { get; set; }
    
    [Parameter] 
    public EventCallback OnHiddenToggled { get; set; }

    private async Task ToggleFavoriteAsync() {
        if (Cocktail.IsFavorite) {
            await BarService.RemoveFromFavoritesAsync(Cocktail.Id, BarId);
        }
        else {
            await BarService.AddToFavoritesAsync(Cocktail.Id, BarId);
        }
        
        Cocktail.IsFavorite = !Cocktail.IsFavorite;
        await OnFavoriteToggled.InvokeAsync();
    }

    private async Task HideUnHideCocktailAsync() {
        if (Cocktail.IsHidden) {
            await BarService.UnHideCocktailAsync(Cocktail.Id, BarId);
        }
        else {
            await BarService.HideCocktailAsync(Cocktail.Id, BarId);
        }
        
        Cocktail.IsHidden = !Cocktail.IsHidden;
        await OnHiddenToggled.InvokeAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await JSRuntime.InvokeVoidAsync("muteUnmuteImages");
        if (firstRender) {
            await JSRuntime.InvokeVoidAsync("initTooltips", Cocktail.Id.ToString());
        }
    }

    protected override void OnInitialized() {
        RandomCocktailService.OnRandomCocktailPopupOpened += OpenCocktailPopupAsync;
    }

    private MarkupString ModifyRecipe(string recipe) {
        var withMethod = Regex.Replace(recipe, @"\(method\)([^\s]+)", m => $"<u>{m.Groups[1].Value}</u>:");
        var spacedRecipe = Regex.Replace(withMethod, @"\.|\:", m => @$"<hr class=""recipe-separator""/>- ");
        var spacedCleanedRecipe = Regex.Replace(spacedRecipe, @"<hr class=""recipe-separator""\/>- $", m => "");
        var garnished = Regex.Replace(spacedCleanedRecipe, @"\(garnish\)", @"🌸");
        var caught = Regex.Replace(garnished, @"\(catch\)", @"😂");
        return (MarkupString)Regex.Replace(caught, @"(\(\d+\))", m => $"<b>{m.Groups[1].Value}</b> ");
    }
    
    private async Task OpenCocktailPopupAsync(int cocktailId) {
        if (cocktailId == Cocktail.Id) {
            await JSRuntime.InvokeVoidAsync("openCocktailPopup", Cocktail.Id.ToString());
        }
    }
    
    private async Task ResetCocktailPopupAsync(int cocktailId) {
        if (cocktailId == Cocktail.Id) {
            await JSRuntime.InvokeVoidAsync("resetCocktailPopup", Cocktail.Id.ToString());
        }
    }

    public void Dispose() {
        RandomCocktailService.OnRandomCocktailPopupOpened -= OpenCocktailPopupAsync;
    }
}

<script>
    function resetCocktailPopup(cocktailId) {
        // nothing here for now
    }
    
    function openCocktailPopup(cocktailId) {
        let cocktailModal = new bootstrap.Modal('#' + cocktailId + '-cocktail-modal');
        cocktailModal.show();
    }
    
    function initTooltips(cocktailId) {
        const glassTypeTooltipTrigger = document.getElementById(cocktailId + '-cocktail-glass-type')
        const glassTypeTooltip = new bootstrap.Tooltip(glassTypeTooltipTrigger, {trigger: 'click', offset: [0, -14]});
        
        if (glassTypeTooltipTrigger) {
            glassTypeTooltipTrigger.addEventListener('shown.bs.tooltip', () => {
              setTimeout(() => {glassTypeTooltip.hide();}, 600)
            });
        }
        
        const favoriteTooltipTrigger = document.getElementById(cocktailId + '-cocktail-favorite')
        if (favoriteTooltipTrigger) {
            new bootstrap.Tooltip(favoriteTooltipTrigger);
        }
        
        const cocktailHideTooltipTrigger = document.getElementById(cocktailId + '-cocktail-hide')
        if (cocktailHideTooltipTrigger) {
            new bootstrap.Tooltip(cocktailHideTooltipTrigger);
        }
    }
    
</script>