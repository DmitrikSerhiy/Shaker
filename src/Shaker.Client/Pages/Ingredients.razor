@page "/ingredients"
@using Shaker.Client.Services
@using Shaker.Client.Dtos
@inject DataService DataService
@inject BarService BarService

<PageTitle>Інгрідієнти</PageTitle>
<div class="container text-center">
    <h1>Інгрідієнти</h1>
</div>

@if(_loading) {
    <p>
        <em>Завантаження...</em>
    </p>
}
else {
    if (_failed) {
        <p>
            <em>@_errorMessage</em>
        </p>
    }
    else if (_ingredientsEmpty) {
        <p>
            <em>Інгрідієнти недоступні.</em>
        </p>
    }
    else {
        <div class="container text-center">
            <select @bind="_selectedIngredientId" class="form-select form-select-lg mb-3" aria-label="Large select example">
                <option value="-1">Обрати інгрідієнт</option>
                @foreach (var ingredient in _allIngredients.Except(_bar!.Ingredients)) {
                    <option value="@ingredient.Id">@ingredient.Name</option>
                }
            </select>
            
            <button type="button" class="btn btn-primary" @onclick="async () => await AddToBarAsync(_selectedIngredientId)">Додати до бару</button>
            
            @if (_myIngredientsEmpty) {
                <p>
                    <em>Бар порожній. Додайте інгрідієнти.</em>
                </p>
            }
            else {
                <ul class="list-group list-group-flush list-group-item-action">
                    @foreach (var ingredient in _bar.Ingredients) {
                        <li class="list-group-item list-group-item-action" style="display: flex; justify-content: space-between; align-items: center">
                            @ingredient.Name 
                            <button type="button" class="btn btn-link" @onclick="async () => await RemoveFromBarAsync(ingredient)">Прибрати</button>
                        </li>
                    }
                </ul>
            }
        </div>
    }
}

@code {
    private bool _ingredientsEmpty;
    private bool _myIngredientsEmpty;

    private bool _loading = true;
    private bool _failed;
    private string _errorMessage = "";
    
    private int _selectedIngredientId = -1;
    private List<Ingredient>_allIngredients = new();
    private Bar? _bar;

    protected override async Task OnInitializedAsync() {
        try {
            _allIngredients = await DataService.LoadIngredientsAsync();
            if (_allIngredients.Count == 0) {
                _ingredientsEmpty = true;
                _loading = false;
                return;
            }
        }
        catch {
            _failed = true;
            _errorMessage = "Failed to load ingredients";
            _loading = false;
            return;
        }


        await LoadBarAsync();
        _loading = false;
    }

    private async Task Refresh() {
        _loading = true;
        _selectedIngredientId = -1;
        _ingredientsEmpty = false;
        _myIngredientsEmpty = false;
        _failed = false;
        _errorMessage = "";
        await LoadBarAsync();
        _loading = false;
    }
    
    private async Task LoadBarAsync() {
        try {
            _bar = await DataService.LoadBarAsync();
            if (_bar == null || _bar.Ingredients.Count == 0) {
                _loading = false;
                _myIngredientsEmpty = true;
                return;
            }
            _bar.Ingredients = _allIngredients
                .Where(ingredient => _bar.Ingredients.Any(i => i.Id == ingredient.Id))
                .ToList();
        }
        catch {
            _failed = true;
            _errorMessage = "Failed to load your bar ingredients";
            _loading = false;
        }
    }

    private async Task AddToBarAsync(int ingredientToAddId) {
        if (ingredientToAddId == -1) {
            return;
        } 
        await BarService.AddToBarAsync(new Ingredient { Id = ingredientToAddId }); 
        await Refresh();
    }

    private async Task RemoveFromBarAsync(Ingredient ingredientToRemove) {
        await BarService.RemoveFromBarAsync(ingredientToRemove);
        await Refresh(); 
    }
}