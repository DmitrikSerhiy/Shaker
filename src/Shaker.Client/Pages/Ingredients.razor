@page "/ingredients"
@using Shaker.Client.Services
@using Shaker.Client.Dtos
@using Shaker.Client.Helpers
@inject DataService DataService
@inject BarService BarService
@inject CocktailService CocktailService
@inject CocktailsStateService CocktailsStateService
@inject BarStateService BarStateService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container-fluid my-ingredients-page-wrapper">
    <div class="container text-center">
        <h2>Інгрідієнти</h2>

        @if (_loading) {
            <p>Завантаження...</p>
        }
        else {
            if (_failed) {
                <p>@_errorMessage</p>
            }
            else if (_currentBarId == -1) {
                <button type="button" class="btn btn-link cocktails-menu-link" data-bs-toggle="offcanvas" data-bs-target="#shaker-menu">Обери бар</button>
            }
            else if (_ingredientsEmpty) {
                <p>Інгрідієнти недоступні.</p>
            }
            else if (_cocktailsEmpty) {
                <p>Коктейлі недоступні.</p>
            }
            else {
                <div class="input-group mb-3">
                    <input id="search-ingredient" type="text" class="form-control cocktail-input" placeholder="Знайти інгрідієнт" @bind="_searchQuery" @oninput="OnInput">
                    <button class="btn btn-outline-secondary inline-cocktails-button" type="button" data-bs-toggle="modal" data-bs-target="#my-ingredients-popup" @onclick="async () => await OnIngredientsPopupOpenAsync()" title="Мої інгрідієнти">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" width="32"><path fill="#6c757d" d="M480-120v-71l216-216 71 71-216 216h-71ZM120-330v-60h300v60H120Zm690-49-71-71 29-29q8-8 21-8t21 8l29 29q8 8 8 21t-8 21l-29 29ZM120-495v-60h470v60H120Zm0-165v-60h470v60H120Z"/></svg>
                    </button>
                </div>
                
                <div class="modal fade cocktail-popup" id="my-ingredients-popup" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="Мої інгрідієнти" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen-lg-down modal-lg">
                        <div class="modal-content">
                            <div class="modal-header cocktail-popup-header">
                                <h2 class="modal-title cocktail-popup-title" id="exampleModalLabel">Мої інгрідієнти</h2>
                                <button id="ingredients-popup" type="button" class="btn-close cocktail-popup-close-btn" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body ingredients-popup-body">
                                @if (!_ingredientsToShowForAdd.Any())
                                {
                                    <p class="mt-3">Бар заповнений. Гайда готувати коктейлі!</p>
                                }
                                else
                                {
                                    <ul class="list-group list-group-flush ingredients-list-to-add">
                                        @foreach (var ingredientGroup in _ingredientsToShowForAdd)
                                        {
                                            <p class="mt-3">@ingredientGroup.Key.GetGroupName()</p>
                                            @foreach (var ingredient in ingredientGroup) {
                                                <li class="list-group-item list-group-item-action ingredients-to-add">
                                                    <input class="form-check-input me-1 ingredient-checkbox" type="checkbox" id="@($"ingredient-{ingredient.Id}")" @onchange="() => OnIngredientsToAdd(ingredient.Id, _currentBarId)">
                                                    <label class="form-check-label stretched-link" for="@($"ingredient-{ingredient.Id}")">@ingredient.Name</label>
                                                    @if (ingredient.CocktailsAmountToIncrease != 0) {
                                                        <span style="text-decoration: none" class="badge text-bg-secondary rounded-pill ingredient-badge">+@ingredient.CocktailsAmountToIncrease</span>
                                                    }
                                                </li>
                                            }
                                        }
                                    </ul>
                                }
                            </div>
                            
                            @if (_ingredientsToShowForAdd.Any()) {
                                <div class="modal-footer popup-ingredients-footer p-3">
                                    <button type="button" class="btn btn-link p-0 @(_ingredientsToAdd.Count == 0 ? "disabled" : "")" @onclick="async () => await AddIngredientsToBarAsync(_currentBarId)">Додати до бару</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @if (_myIngredientsEmpty) {
                    <p>Бар порожній. Додай інгрідієнти.</p>
                }
            }
        }
    </div>

    @if (_loading == false && _failed == false && _currentBarId != -1 && _myIngredientsEmpty == false && _ingredientsEmpty == false && _cocktailsEmpty == false) {
        <div id="my-ingredients-content-wrapper" class="my-ingredients-content-wrapper container-fluid">
            <div class="container">
                 @foreach (var ingredientGroup in _searchedIngredients) {
                     <p class="mt-3">@ingredientGroup.Key.GetGroupName()</p>
                     <ul class="list-group list-group-flush list-group-item-action">
                         @foreach (var ingredient in ingredientGroup.ToList()) {
                             <li class="list-group-item list-group-item-action my-added-ingredients">
                                 @ingredient.Name
                                 <button type="button" class="btn btn-link" @onclick="async () => await RemoveFromBarAsync(ingredient, _currentBarId)">Прибрати</button>
                             </li>
                         }
                     </ul>
                 }
            </div>
        </div>
    }
</div>

@code {
    private bool _ingredientsEmpty;
    private bool _myIngredientsEmpty;
    private bool _cocktailsEmpty;


    private bool _loading = true;
    private bool _failed;
    private string _errorMessage = "";

    private int _currentBarId = -1;
    private List<Ingredient> _allIngredients = new();
    private List<Cocktail> _allCocktails = new();
    private List<IGrouping<IngredientGroup,Ingredient>> _searchedIngredients = new();
    private List<Cocktail> _availableCocktails = new();
    private List<Ingredient> _ingredientsToAdd = new();
    private List<IGrouping<IngredientGroup,Ingredient>> _ingredientsToShowForAdd = new();
    private Bar _bar = new();

    private string _searchQuery = "";
    private Timer? _debounceSearchTimer;

    protected override async Task OnInitializedAsync() {
        _debounceSearchTimer = new Timer(Search, null, Timeout.Infinite, Timeout.Infinite);
        BarStateService.OnCurrentBarChange += OnCurrentBarBarChanged;
        await LoadAndSetIngredientsAsync();
    }

    private async Task OnCurrentBarBarChanged() {
        DataService.ClearCachedBar();
        await RefreshAsync();
        StateHasChanged();
    }

    private async Task RefreshAsync() {
        _loading = true;
        _searchedIngredients = new();
        _ingredientsToAdd = new();
        _availableCocktails = new();
        _ingredientsToShowForAdd = new();
        _bar = new Bar();
        _ingredientsEmpty = false;
        _myIngredientsEmpty = false;
        _cocktailsEmpty = false;

        _failed = false;
        _errorMessage = "";

        ResetSearch();
        _currentBarId = await BarStateService.GetBarAsync();
        await LoadAndSetIngredientsAsync();
        _loading = false;
    }

    private async Task LoadAndSetIngredientsAsync() {
        _currentBarId = await BarStateService.GetBarAsync();
        if (_currentBarId == -1) {
            await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
            _loading = false;
            return;
        }

        // load all ingredients
        try {
            _allIngredients = await DataService.LoadIngredientsAsync();
            if (_allIngredients.Count == 0) {
                await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
                _ingredientsEmpty = true;
                _loading = false;
                return;
            }
        }
        catch {
            _failed = true;
            await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
            _errorMessage = "Не вдалося завантажити інгрідієнти.";
            _loading = false;
            return;
        }

        // load all cocktails
        try {
            _allCocktails = await DataService.LoadCocktailsAsync();
            await CocktailsStateService.SetAllCocktailsCountAsync(_allCocktails.Count);
            if (_allCocktails.Count == 0) {
                _cocktailsEmpty = true;
                await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
                _loading = false;
                return;
            }
        }
        catch {
            _failed = true;
            _errorMessage = "Не вдалося завантажити рецепти коктейлів.";
            _loading = false;
            await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
            return;
        }

        // map all cocktails
        foreach (var cocktail in _allCocktails) {
            cocktail.Ingredients = _allIngredients
                .Where(ingredient => cocktail.Ingredients.Any(i => i.Id == ingredient.Id))
                .ToList();
            if (cocktail.OptionalIngredients != null) {
                cocktail.OptionalIngredients = _allIngredients
                    .Where(ingredient => cocktail.OptionalIngredients.Any(i => i.Id == ingredient.Id))
                    .ToList();
            }
        }

        // load bar
        try {
            _bar = await DataService.LoadBarAsync(_currentBarId);
            if (_bar.Ingredients.Count == 0) {
                _loading = false;
                await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
                _myIngredientsEmpty = true;
                return;
            }
        }
        catch {
            _failed = true;
            await CocktailsStateService.SetCalculatedCocktailsCountsAsync(0, 0);
            _errorMessage = "Не вдалося завантажити бар";
            _loading = false;
        }

        _bar.Ingredients = _allIngredients
            .Where(ingredient => _bar.Ingredients.Any(i => i.Id == ingredient.Id))
            .ToList();

        _searchedIngredients = GroupIngredients(_bar.Ingredients);
        _availableCocktails = CocktailService.GetAvailableCocktails(_bar, _allCocktails);

        await CocktailsStateService.SetCalculatedCocktailsCountsAsync(_availableCocktails.Count, _bar.Ingredients.Count);
        _loading = false;
    }


    private void ResetSearch() {
        _searchQuery = "";
        _searchedIngredients = GroupIngredients(_bar.Ingredients);
    }
    
    private async Task RemoveFromBarAsync(Ingredient ingredientToRemove, int barId) {
        if (barId == -1) {
            return;
        }
        await BarService.RemoveFromBarAsync(ingredientToRemove, barId);
        DataService.ClearCachedBar();
        await RefreshAsync();
    }


    private void OnInput(ChangeEventArgs e) {
        _searchQuery = e.Value?.ToString() ?? "";
        _debounceSearchTimer!.Change(250, Timeout.Infinite);
    }

    private async void Search(object? state) {
        await InvokeAsync(() => {
            _searchedIngredients = GroupIngredients(SearchHelper.SearchIngredients(_bar.Ingredients, _searchQuery));
        });
    }

    public void Dispose() {
        _debounceSearchTimer?.Dispose();
        BarStateService.OnCurrentBarChange -= OnCurrentBarBarChanged;
    }
    
    private List<IGrouping<IngredientGroup, Ingredient>> GroupIngredients(List<Ingredient> ingredients) {
        return ingredients.GroupBy(i => i.Group).OrderBy(g => (int)g.Key).ToList();
    }
    
    private void OnIngredientsToAdd(int ingredientToAddId, int barId) {
        if (barId == -1) {
            return;
        }
        if(_ingredientsToAdd.Any(i => i.Id == ingredientToAddId)) {
            _ingredientsToAdd.RemoveAll(i => i.Id == ingredientToAddId);
        }
        else {
            _ingredientsToAdd.Add(new Ingredient {Id = ingredientToAddId});
        }
    }

    private async Task AddIngredientsToBarAsync(int barId){
        if (barId == -1) {
            return;
        }
        if (_ingredientsToAdd.Count == 0) {
            await JSRuntime.InvokeVoidAsync("closeIngredientsPopup");
            return;
        }

        await BarService.AddToBarAsync(_ingredientsToAdd.ToList(), barId);
        DataService.ClearCachedBar();
        _ingredientsToAdd = new();
        await JSRuntime.InvokeVoidAsync("clearCheckboxes");
        await JSRuntime.InvokeVoidAsync("closeIngredientsPopup");
        await RefreshAsync();
    }
    
    private async Task OnIngredientsPopupOpenAsync() {
        await JSRuntime.InvokeVoidAsync("clearCheckboxes");
        _ingredientsToAdd = new();
        var ingredients = _allIngredients.Except(_bar.Ingredients).ToList();
        CalculateCocktailsAmountToIncrease(ingredients);
        _ingredientsToShowForAdd = GroupIngredients(ingredients);
    }

    private void CalculateCocktailsAmountToIncrease(List<Ingredient> ingredientsToAdd) {
        var cocktailsCantBeMade = _allCocktails.Except(_availableCocktails).ToList();
        var availableIngredients = _bar.Ingredients.ToList();
        foreach (var ingredient in ingredientsToAdd) {
            var cocktailsWithCurrentIngredient = cocktailsCantBeMade
                .Where(cocktail => cocktail.Ingredients.Any(i => i.Id == ingredient.Id))
                .ToList();
            
            if (cocktailsWithCurrentIngredient.Count == 0) {
                continue;
            }

            foreach (var cocktailWithCurrentIngredient in cocktailsWithCurrentIngredient) {
                var allExceptCurrentIngredients = cocktailWithCurrentIngredient.Ingredients
                    .Where(i => i.Id != ingredient.Id)
                    .ToList();

                if (allExceptCurrentIngredients.All(ing => availableIngredients.Any(availableIngredient => availableIngredient.Id == ing.Id))) {
                    ingredient.CocktailsAmountToIncrease++;
                }
            }
            
        }
    }
}

<script>
   function clearCheckboxes() {
       const checkboxes = document.querySelectorAll('.ingredient-checkbox');
       
       checkboxes.forEach((checkbox) => {
           checkbox.checked = false;
       });
   }
   
   function closeIngredientsPopup() {
       let closeButton = document.getElementById("ingredients-popup");
       closeButton.click();
   }
   
    (() => {
        let ingredientsToTopButton = document.getElementById("to-top");
        if (ingredientsToTopButton) {
           ingredientsToTopButton.style.display = "none";
        }
   
       setTimeout(() => {
           let myIngredientsScrollable = document.getElementById("my-ingredients-content-wrapper");
           let ingredientsToTopButton = document.getElementById("to-top");
             
           myIngredientsScrollable.addEventListener('scroll',(event) => {
               if (event.target.scrollTop > 400) {
                   ingredientsToTopButton.style.display = "flex";
               } else {
                   ingredientsToTopButton.style.display = "none";
               }
           });
                   
       }, 1000); 
    })();
</script>