@page "/"
@using Shaker.Client.Services
@using Shaker.Client.Dtos
@using Shaker.Client.Helpers
@inject CocktailService CocktailService
@inject DataService DataService
@implements IDisposable

<div class="container text-center">
    <h2>Приготувати зараз</h2>

    @if (_loading) {
        <p>Завантаження...</p>
    }
    else {
        if (_failed) {
            <p>@_errorMessage</p>
        }
        else if (_ingredientsEmpty) {
            <p>Інгрідієнти недоступні.</p>
        }
        else if (_myIngredientsEmpty) {
            <p>Бар порожній. Додайте інгрідієнти.</p>
        }
        else if (_cocktailsEmpty) {
            <p>Коктейлі недоступні.</p>
        }
        else if (_availableCocktails.Count == 0) {
            <p>Неможливо створити коктейль із наявних інгрідієнтів.</p>
        }
        else {

            <div class="mb-3">
                <input type="text" class="form-control" placeholder="Знайти за назвою або рецептом" @bind="_searchQuery" @oninput="OnInput">
            </div>
            <div class="row gx-3 row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-3">
                @foreach (var cocktail in _searchedCocktails) {
                    <CocktailCard Cocktail="cocktail" OnFavoriteToggled="async () => await RefreshAsync()"></CocktailCard>
                }
            </div>
        }
    }
</div>

@code {
    private List<Cocktail> _availableCocktails = new();
    private List<Cocktail> _searchedCocktails = new();
    
    private bool _ingredientsEmpty;
    private bool _cocktailsEmpty;
    private bool _myIngredientsEmpty;
    
    private bool _loading = true;
    private bool _failed;
    private string _errorMessage = "";
    
    private string _searchQuery = "";
    private Timer? _debounceSearchTimer;
    
    private List<Cocktail> _allCocktails = null!;
    private List<Ingredient> _allIngredients = null!;
    private Bar? _bar; 

    protected override async Task OnInitializedAsync() {
        _debounceSearchTimer = new Timer(Search, null, Timeout.Infinite, Timeout.Infinite);
        await LoadAndSetDataAsync();
        _loading = false;
    }

    private void OnInput(ChangeEventArgs e) {
        _searchQuery = e.Value?.ToString() ?? "";
        _debounceSearchTimer!.Change(250, Timeout.Infinite);
    }
    
    private async void Search(object? state) {
        await InvokeAsync(() => {
            _searchedCocktails = SearchHelper.SearchCocktails(_availableCocktails, _searchQuery);
            StateHasChanged();
        });
    }

    private async Task RefreshAsync() {
        _availableCocktails = new();
        _searchedCocktails = new();
        _ingredientsEmpty = false;
        _cocktailsEmpty = false;
        _myIngredientsEmpty = false;
    
        _loading = true;
        _failed = false;
        _errorMessage = "";
        
        _searchQuery = "";
        _debounceSearchTimer = new Timer(Search, null, Timeout.Infinite, Timeout.Infinite);
        await LoadAndSetDataAsync();
        _loading = false;
    }

    private async Task LoadAndSetDataAsync() {
        try {
            _allCocktails = await DataService.LoadCocktailsAsync();
            if (_allCocktails.Count == 0) {
                _cocktailsEmpty = true;
                _loading = false;
                return;
            }
        } catch {
            _failed = true;
            _errorMessage = "Failed to load cocktail recipes";
            _loading = false;
            return;
        }
        
        try {
            _allIngredients = await DataService.LoadIngredientsAsync();
            if (_allIngredients.Count == 0) {
                _ingredientsEmpty = true;
                _loading = false;
                return;
            }
        } catch {
            _failed = true;
            _errorMessage = "Failed to load ingredients";
            _loading = false;
            return;
        }

        try {
            foreach(var cocktail in _allCocktails) {
                cocktail.Ingredients = _allIngredients
                    .Where(ingredient => cocktail.Ingredients.Any(i => i.Id == ingredient.Id))
                    .ToList();
            }
        } catch {
            _failed = true;
            _errorMessage = "Failed to load cocktails ingredients";
            _loading = false;
            return;
        }

        try {
            _bar = await DataService.LoadBarAsync();
            if (_bar == null || _bar.Ingredients.Count == 0) {
                _loading = false;
                _myIngredientsEmpty = true;
                return;
            }
            _bar.Ingredients = _allIngredients
                .Where(ingredient => _bar.Ingredients.Any(i => i.Id == ingredient.Id))
                .ToList();
        } catch {
            _failed = true;
            _errorMessage = "Failed to load your bar ingredients";
            _loading = false;
            return;
        }

        _availableCocktails = CocktailService.GetAvailableCocktails(_bar, _allCocktails);
        _availableCocktails = CocktailService.MapAndSortFavoriteCocktails(_bar, _availableCocktails);
        _searchedCocktails = _availableCocktails;
    }
    
    public void Dispose() {
        _debounceSearchTimer?.Dispose();
    }
}